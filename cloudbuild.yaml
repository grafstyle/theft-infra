steps:
  # Paso 1: Clonar el repositorio de Terraform desde Cloud Source Repositories
  - name: 'gcr.io/cloud-builders/git'
    args: ['clone', 'https://github.com/pRodriguez1630/terraform-infra-test.git']

  # Paso 2: Configurar las credenciales de Google Cloud SDK para acceder a recursos de GCP
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud auth activate-service-account terraform-test-account@rosy-acolyte-412215.iam.gserviceaccount.com --key-file=\Documents\rosy-acolyte-412215-15449e5d0d54'

  # Paso 3: Inicializar Terraform y descargar los plugins necesarios 
  - name: 'hashicorp/terraform:1.0.0'
    entrypoint: 'terraform'
    args: ['init']

  # Paso 4: Validar la configuraci√≥n de Terraform
  - name: 'hashicorp/terraform:1.0.0'
    entrypoint: 'terraform'
    args: ['validate']

  # Paso 5: Planificar los cambios en la infraestructura
  - name: 'hashicorp/terraform:1.0.0'
    entrypoint: 'terraform'
    args: ['plan', '-out=tfplan']

# Indica a Cloud Build que utilice un backend remoto para el estado de Terraform (Google Cloud Storage en este caso)
options:
  machineType: 'E2_MEDIUM'
  env:
    # - 'GOOGLE_APPLICATION_CREDENTIALS=Users\Joshua Dario\Documents\rosy-acolyte-412215-15449e5d0d54'
    - 'TF_CLI_ARGS_init=-backend-config="bucket=mi-bucket-de-logs" -backend-config="prefix=terraform/state"'
    - 'GOOGLE_APPLICATION_CREDENTIALS=rosy-acolyte-412215-15449e5d0d54.json'