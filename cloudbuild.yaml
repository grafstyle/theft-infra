steps:
- id: 'clone repository'
  name: 'gcr.io/cloud-builders/git'
  args:
  - clone
  - 'https://github.com/pRodriguez1630/terraform-infra-test.git'

- id: 'branch name-2'
  name: gcr.io/cloud-builders/git
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      branch=main
      git checkout ${branch}
      echo "***********************"
      git branch --show-current
      echo "***********************"

- id: 'Check Existing Resources'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    branch=main  # Replace with your main branch name

    cd terraform-infra-test/${branch}  # Assuming branch directory structure

    # Initialize Terraform
    terraform init || exit 1

    # Capture current state to `current_state.tfstate`
    terraform show -no-color > current_state.tfstate

    # Extract resource names from current state
    resources=$(jq -r '.resources | keys[]' current_state.tfstate)

    # Check each resource for existence
    for resource in $resources; do
      if grep -q "\"$resource\"" current_state.tfstate; then
        echo "*******************************************************************************"
        echo "Resource '${resource}' already exists in Terraform state."
        echo "Skipping creation to avoid naming conflicts."
        echo "*******************************************************************************"
      else
        echo "*******************************************************************************"
        echo "Resource '${resource}' not found in Terraform state."
        echo "Proceeding with creation..."
        echo "*******************************************************************************"
        terraform apply -auto-approve
      fi
    done
    
- id: 'tf init'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
   branch=main
      if [ -d "terraform-infra-test" ]; then
        cd terraform-infra-test}
        terraform init
      else
        for dir in terraform-infra-test/*/
        do
          cd terraform-infra-test
        
          echo ""
          echo "*************** TERRAFORM INIT ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform init || exit 1
          cd ../../
        done
      fi


- id: 'tf plan'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      branch=main
      if [ -d "terraform-infra-test" ]; then
        cd terraform-infra-test/${branch}
        terraform plan
      else
        for dir in terraform-infra-test*/
        do
          cd ${dir}
          env=${dir%*/}
          env=${env#*/}
          echo ""
          echo "*************** TERRAFOM PLAN ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform init
          terraform plan 
          cd ../../
        done
      fi


- id: 'tf apply'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      branch=main
      if [ -d "terraform-infra-test" ]; then
        cd terraform-infra-test
        terraform init
        terraform apply -auto-approve
      else
        echo "***************************** SKIPPING APPLYING *******************************"
        echo "Branch '${branch}' does not represent an official environment."
        echo "*******************************************************************************"
        terraform apply -auto-approve
      fi
